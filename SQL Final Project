This project was completed using a data set called 'chinook' from Break Into Tech which inludes the following data:

"employees table stores employees data such as employee id, last name, first name, etc. It also has a field named ReportsTo to specify who reports to whom.
 customers table stores customers data. The line between employees.Employeeid and customers.SupportRepID shows how the two tables are related (ie, how you would JOIN them).
 The invoices table stores invoice header data (Customer ID, Billing Address, etc) and the invoice_items table stores the invoice line items data (Unit Price, Quantity).
 artists table stores artists data.
 albums table stores data about a list of tracks. Each album belongs to one artist. However, one artist may have multiple albums.
 media_types table stores media types such as MPEG audio and AAC audio files.
 genres table stores music types such as rock, jazz, metal, etc.
 tracks table stores the data of songs. Each track belongs to one album.
 playlists table store data about playlists. Each playlist contains a list of tracks. Each track may belong to multiple playlists. The relationship between the playlists table and tracks table is many-to-many. The playlist_track table is used to reflect this relationship"

SQL Questions:

1. Show Customers (their full names, customer ID, and country) who are not in the US.

select FirstName, LastName, customerID, Country
FROM chinook.customers WHERE country <> 'United States';

2. Show only the Customers from Brazil.

select FirstName, LastName, customerID, Country
FROM chinook.customers WHERE country = 'Brazil';

3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

select customers.FirstName, customers.LastName, invoices.invoiceid, invoices.InvoiceDate, invoices.BillingCountry
from chinook.customers
JOIN chinook.invoices ON customers.customerID = invoices.customerID;

4. Show the Employees who are Sales Agents

select  EmployeeId, FirstName, Lastname, title
FROM employees 
WHERE title LIKE 'Sales Support Agent';

5. Find a unique/distinct list of billing countries from the Invoice table.

select DISTINCT  Billingcountry from invoices;

6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

Select customers.Lastname, customers.Firstname, invoices.invoiceid from employees

JOIN customers on employees.employeeid = customers.customerid

JOIN invoices on customers.customerid = invoices.customerid;

7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

select (invoice_items.UnitPrice * invoice_items.Quantity) AS invoice_total, customers.firstname AS customer_firstname, customers.lastname AS customer_lastname, invoices.billingcountry, employees.firstname AS employee_firstname, employees.lastname AS employee_lastname
from invoice_items
JOIN invoices ON invoice_items.InvoiceLineID = invoices.InvoiceId
JOIN customers ON invoices.customerID = customers.CustomerId
JOIN employees ON customers.SupportRepID = employees.employeeID;

8. How many Invoices were there in 2009?

select count(*) from invoices
WHERE InvoiceDate LIKE '%2009%';

9. What are the total sales for 2009?

select sum (invoice_items.Quantity * invoice_items.UnitPrice) 
FROM invoice_items
JOIN invoices on invoice_items.InvoiceLineId = invoices.InvoiceId
WHERE invoices.InvoiceDate LIKE '%2009%';

10. Write a query that includes the purchased track name with each invoice line ID

select tracks.Name AS track_name, invoice_items.InvoiceLineId
FROM invoice_items
JOIN tracks on tracks.TrackId = invoice_items.TrackId;

11. select tracks.Name AS track_name, artists.Name AS artist_name, invoice_items.InvoiceLineId
FROM invoice_items
JOIN tracks on invoice_items.TrackId = tracks.TrackId
JOIN albums on albums.AlbumId = tracks.AlbumId
JOIN artists on artists.artistID = albums.ArtistId;

12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

select tracks.name as track_name, albums.title as album_title, media_types.name as media_type, genres.name as genre
FROM tracks
JOIN albums on tracks.albumid = albums.albumid
JOIN media_types on tracks.mediatypeID = media_types.mediatypeID
JOIN genres on tracks.genreid = genres.genreid
order by track_name;

13. Show the total sales made by each sales agent.BIT_DB

SELECT 
    e.employeeID,
    e.firstname,
    e.lastname,
    SUM(ii.UnitPrice * ii.Quantity) AS total_sales
FROM 
    employees e
JOIN 
    customers c ON e.employeeID = c.supportRepID
JOIN 
    invoices i ON c.CustomerID = i.CustomerID
JOIN 
    invoice_items ii ON i.invoiceid = ii.invoiceid
GROUP BY 
    e.employeeID, e.firstname, e.lastname
ORDER BY 
    total_sales DESC;

14. Show the total sales made by each sales agent.BIT_DB

SELECT 
    e.employeeID,
    e.firstname,
    e.lastname,
    SUM(ii.UnitPrice * ii.Quantity) AS total_sales
FROM 
    employees e
JOIN 
    customers c ON e.employeeID = c.supportRepID
JOIN 
    invoices i ON c.CustomerID = i.CustomerID
JOIN 
    invoice_items ii ON i.invoiceid = ii.invoiceid
GROUP BY 
    e.employeeID, e.firstname, e.lastname
ORDER BY 
    total_sales DESC
    LIMIT 1;    
